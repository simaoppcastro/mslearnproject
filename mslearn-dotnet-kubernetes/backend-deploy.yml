---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pizzabackend
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: pizzabackend
    spec:
      containers:
      - name: pizzabackend
        # image: docker-username/image-name:version
        image: simaoppcastro/pizzabackend:latest
        ports:
        - containerPort: 80
        env:
        - name: ASPNETCORE_URLS
          value: http://*:80
        # good practice to add resources limits
        resources:
          limits:
            memory: 256Mi
            cpu: "1"
          requests:
            memory: 256Mi
            cpu: "0.2"
  selector:
    matchLabels:
      app: pizzabackend
---
apiVersion: v1
kind: Service
metadata:
  name: pizzabackend
spec:
  type: ClusterIP
  ports:
  - port: 80
  selector:
    app: pizzabackend

# Deploy and run the backend microservice 
# This command is telling Kubernetes to run the file we created. It will download the image from Docker Hub and create the container. 
# -> kubectl apply -f backend-deploy.yml
# To view the progress and status, use the following code
# -> kubectl get pods

# using kubernetes to scale the backend service (container)
# note: The reason we need to specify deployment/pizzabackend 
# instead of just pizzabackend is because we're scaling the entire Kubernetes deployment of the pizza backend service, and that will scale the instances of the individual pods correctly.
# for example to scale up to 5 instances
# -> kubectl scale --replicas=5 deployment/pizzabackend
# scale back to only one instance
# -> kubectl scale --replicas=1 deployment/pizzabackend
